# adapted from the official tempo docker-compose example: 
# https://github.com/grafana/tempo/blob/main/example/docker-compose/otel-collector/docker-compose.yaml

version: "3"

# docs to install docker plugin for loki logs driver: 
# https://grafana.com/docs/loki/latest/send-data/docker-driver/
x-logging: &logging
  # logging:
  #   driver: loki
  #   # docs on loki driver options: https://grafana.com/docs/loki/latest/send-data/docker-driver/configuration/
  #   options:
  #     loki-url: "http://loki:3100/loki/api/v1/push"

services:

  # send traces and metrics to otel-collector, send logs to loki via logging driver
  service-a:
    # <<: *logging
    environment:
      # OTEL env var docs: https://opentelemetry-python.readthedocs.io/en/latest/sdk/environment_variables.html
      OTEL_EXPORTER_OTLP_ENDPOINT: otel-collector:4317
      OTEL_EXPORTER_METRICS_ENDPOINT: http://otel-collector:4317
      OTEL_LOG_LEVEL: DEBUG
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: console,otlp
      OTEL_EXPORTER_OTLP_INSECURE: "true"
      OTEL_EXPORTER_OTLP_METRICS_INSECURE: "true"

  service-b:
    # <<: *logging
    environment:
      OTEL_EXPORTER_OTLP_ENDPOINT: otel-collector:4317
      OTEL_EXPORTER_METRICS_ENDPOINT: otel-collector:4317
      OTEL_EXPORTER_OTLP_INSECURE: "true"

  service-c:
    # <<: *logging
    environment:
      OTEL_EXPORTER_OTLP_ENDPOINT: otel-collector:4317
      OTEL_EXPORTER_METRICS_ENDPOINT: otel-collector:4317
      OTEL_EXPORTER_OTLP_INSECURE: "true"

  # forward traces to tempo and metrics to prometheus for longer term storage
  otel-collector:
    # <<: *logging
    image: otel/opentelemetry-collector:0.86.0
    command: [ "--config=/etc/otel-collector.yaml" ]
    volumes:
      - ./otel-collector-config.grafana.yaml:/etc/otel-collector.yaml
    ports:
      - 4317:4317
      - "9090"  # expose :9090/metrics endpoint via prometheus exporter

  # store traces
  tempo:
    # <<: *logging
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./grafana/tempo.yaml:/etc/tempo.yaml
      # - ./tempo-data:/tmp/tempo  # (optional) tempo state
    ports:
      - "14268"  # jaeger ingest
      - "3200"   # tempo
      - "4317"   # otlp grpc
      - "4318"   # otlp http
      - "9411"   # zipkin

  # store metrics
  prometheus:
    # <<: *logging
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
    volumes:
      - ./grafana/prometheus.yaml:/etc/prometheus.yaml
    ports:
      - "9090:9090"

  # # query prometheus and tempo for traces and metrics
  # grafana:
  #   # <<: *logging
  #   image: grafana/grafana:10.1.1
  #   volumes:
  #     - ./grafana/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
  #   environment:
  #     - GF_AUTH_ANONYMOUS_ENABLED=true
  #     - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
  #     - GF_AUTH_DISABLE_LOGIN_FORM=true
  #     - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
  #   ports:
  #     - "3000:3000"

  # # enabling the loki log driver caused stopping docker containers to hang
  # loki:
  #   image: grafana/loki:2.9.1
  #   # command: -config.file=/etc/loki/local-config.yaml
  #   ports:
  #     - "3100"